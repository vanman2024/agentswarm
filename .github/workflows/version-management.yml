name: AgentSwarm Version Management

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  checks: read
  pull-requests: write

jobs:
  version-management:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release dependencies
      run: |
        npm install --no-save \
          semantic-release \
          @semantic-release/changelog \
          @semantic-release/git \
          @semantic-release/github \
          @semantic-release/exec

    - name: Update VERSION file and create release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create semantic-release config
        cat > .releaserc.json << 'EOF'
        {
          "branches": ["main"],
          "plugins": [
            "@semantic-release/commit-analyzer",
            "@semantic-release/release-notes-generator",
            [
              "@semantic-release/exec",
              {
                "prepareCmd": "node -e \"const fs = require('fs'); const versionData = { version: 'v${nextRelease.version}', commit: process.env.GITHUB_SHA, build_date: new Date().toISOString(), build_type: 'production' }; fs.writeFileSync('VERSION', JSON.stringify(versionData, null, 2));\""
              }
            ],
            [
              "@semantic-release/git",
              {
                "assets": ["VERSION"],
                "message": "chore(release): ${nextRelease.version} [skip ci]\n\n${nextRelease.notes}"
              }
            ],
            "@semantic-release/github"
          ]
        }
        EOF
        
        # Run semantic-release
        npx semantic-release
      continue-on-error: true

    - name: Trigger template component sync
      if: always()
      run: |
        # Get the current version from VERSION file
        AGENTSWARM_VERSION=""
        if [[ -f "VERSION" && -s "VERSION" ]]; then
          AGENTSWARM_VERSION=$(cat VERSION | jq -r '.version // empty' 2>/dev/null || true)
        fi
        
        # Fallback to latest git tag if VERSION file doesn't exist or is empty
        if [[ -z "$AGENTSWARM_VERSION" ]]; then
          AGENTSWARM_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.5.3")
        fi
        
        echo "ðŸš€ Triggering template sync for AgentSwarm $AGENTSWARM_VERSION"
        
        # Send repository_dispatch event to template repo
        curl -X POST \
          -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/vanman2024/multi-agent-claude-code/dispatches \
          -d "{
            \"event_type\": \"component-release\",
            \"client_payload\": {
              \"component\": \"agentswarm\",
              \"version\": \"$AGENTSWARM_VERSION\",
              \"source_repo\": \"vanman2024/agentswarm\",
              \"ref\": \"main\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"trigger_source\": \"agentswarm-version-management\"
            }
          }"
        
        echo "âœ… Template sync triggered for AgentSwarm $AGENTSWARM_VERSION"

    - name: AgentSwarm version management complete
      if: always()
      run: |
        echo "âœ… AgentSwarm version management workflow completed"
        echo "ðŸ“¦ AgentSwarm version: $(cat VERSION | jq -r .version 2>/dev/null || echo 'unknown')"
        echo "ðŸš€ Template sync request sent to multi-agent-claude-code"